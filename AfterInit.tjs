// AfterInit.tjs

KAGLoadScript("LoadThumbnail.tjs");
KAGLoadScript("SliderFuntion.tjs");
KAGLoadScript("Config_SliderControl.tjs");

//KAGLoadScript("SliderFuntion.tjs");
//KAGLoadScript("Config_SliderControl.tjs");

function ducking_start()
{
	if(sf.bgmauto==1 || 3 <= kag.skipMode)
	{
		f.bgm_macro_origin=f.volume_bgm_ducking;
		f.volume_bgm_voice1=f.volume_bgm1;
		f.volume_bgm_voice2=f.volume_bgm2;
		f.volume_bgm_voice3=f.volume_bgm3;
		return;
	}
	f.bgm_macro_origin = f.volume_bgm_ducking * 0.75;
	f.volume_bgm_voice1=f.volume_bgm1 * 0.75;
	f.volume_bgm_voice2=f.volume_bgm2 * 0.75;
	f.volume_bgm_voice3=f.volume_bgm3 * 0.75;
	if(f.bgm_macro_origin!=0 && kag.bgm.currentBuffer.status=='play' && f.volume_bgm_ducking!=0){
		kag.tagHandlers.fadebgm(%["volume"=>&f.bgm_macro_origin,"time"=>"500"]);
	}
	if(f.volume_bgm_voice1!=0 && f.volume_bgm1!=0){
		kag.tagHandlers.fadese(%["volume"=>&f.volume_bgm_voice1,"time"=>"500","buf"=>"18"]);
	}
	if(f.volume_bgm_voice2!=0 && f.volume_bgm2!=0){
		kag.tagHandlers.fadese(%["volume"=>&f.volume_bgm_voice2,"time"=>"500","buf"=>"19"]);
	}
	if(f.volume_bgm_voice3!=0 && f.volume_bgm3!=0){
		kag.tagHandlers.fadese(%["volume"=>&f.volume_bgm_voice3,"time"=>"500","buf"=>"20"]);
	}
	return;
}


function ducking_end()
{
	if(sf.bgmauto==1 || 3 <= kag.skipMode)
	{
		return;
	}
	if(sf.bgm_v!=0 && kag.bgm.currentBuffer.status=='play' && f.volume_bgm_ducking!=0){
		kag.tagHandlers.fadebgm(%["volume"=>&f.volume_bgm_ducking,"time"=>"500"]);
	}
	if(sf.bgm_v!=0 && f.volume_bgm1!=0){
		kag.tagHandlers.fadese(%["volume"=>&f.volume_bgm1,"time"=>"500","buf"=>"18"]);
	}
	if(sf.bgm_v!=0 && f.volume_bgm2!=0){
		kag.tagHandlers.fadese(%["volume"=>&f.volume_bgm2,"time"=>"500","buf"=>"19"]);
	}
	if(sf.bgm_v!=0 && f.volume_bgm3!=0){
		kag.tagHandlers.fadese(%["volume"=>&f.volume_bgm3,"time"=>"500","buf"=>"20"]);
	}
	return;
}
function hover_on(char1,char2,char3,char4,flag="")
{
	//kag.tagHandlers.current(%["layer"=>"message8"]);
	//kag.currentLayer(%["layer"=>"message0","page"=>"fore"]);
	//var dic=%["layer"=>"message0"];
	//setCurrentMessageLayer(dic);
	kag.fore.messages[8].setPosition(%["left"=>"278","top"=>"554","opacity"=>"0","width"=>"915","height"=>"80","visible"=>"true"]);
	kag.fore.messages[8].font.height=14;
	kag.fore.messages[8].drawText(0, 10,char1, 0x777777f);
	kag.fore.messages[8].drawText(0, 27,char2, 0x777777f);
	kag.fore.messages[8].drawText(0, 44,char3, 0x777777f);
	kag.fore.messages[8].drawText(0, 61,char4, 0x777777f);
	if(flag!=""){
		kag.se[0].setOptions(%["volume"=>"100"]);
		kag.tagHandlers.fadeinse(%["storage"=>"sound/sse/Mouseover","time"=>"40","buf"=>"0"]);
	}
}

// 関数名：
//  hover_off(lay)
// 機能概要：
//   指定した前景レイヤを非表示にする
// 引数：
//   lay … 前景レイヤ番号（0, 1, 2…）
// 戻り値：
//   なし
function hover_off()
{
	kag.fore.messages[8].fillRect(0, 0, 915, 80, 0x00000000);
	kag.tagHandlers.fadese(%["volume"=>"35","time"=>"40","buf"=>"0"]);
	hover_on('設定項目にカーソルを合わせると、設定できる内容がここに表示されます。');
}



function sse_play()
{
	kag.se[0].setOptions(%["volume"=>"100"]);
	//kag.se[0].play(%['storage'=>'sound/sse/Mouseover']);
	kag.tagHandlers.fadeinse(%["storage"=>"sound/sse/Mouseover","time"=>"25","buf"=>"0"]);
}

function sse_stop()
{
	kag.tagHandlers.fadese(%["volume"=>"35","time"=>"30","buf"=>"0"]);
}
// 関数名：
//   get_bookmark_data(num)
// 機能概要：
//   栞の日付とブックマーク名を連結した文字列を返す
// 引数：
//   num … 栞の番号（0, 1, 2…）
// 戻り値：
//   栞がある場合…"[num] YYYY/MM/DD hh:mm ブックマーク名"形式の文字列で返す
//   栞がない場合…"[num] ----/--/-- --:-- (未設定)"という文字列を返す
function get_bookmark_data(num)
{
	var date = kag.getBookMarkDate(num);
	if (date == "")
		return "[" + (num+1) + "] ----/--/-- --:-- " + kag.getBookMarkPageName(num);
	else
		return "[" + (num+1) + "] " + date + " " + kag.getBookMarkPageName(num);
}
//return tagHandlers.cm_org(elm); だとなぜかエラーが出るので
//return tagHandlers.org_cm(elm); に名前を変更
//コメントをつけまくって、逆に見づらい

with(kag)
{
	kag.askOnClose= !sf.confirm;
	if(sf.title==void)
		sf.title="";

	.currentMessage =""; //見出しへの追加文字（メッセージレイヤの一番上に表示されている文字）
	.storeCurrentMessages = sf.title.length+1+28; //見出しに追加する文字数

	//kag.tagHandlersにタグの実装が入っている（[macro][if]等の例外有）
	.tagHandlers.org_ch = .tagHandlers.ch;
	.tagHandlers.ch = function( elm )
	{

		if(!(kag.current==kag.fore.messages[0]||kag.current==kag.fore.messages[1]||kag.current==kag.back.messages[2]))
			return tagHandlers.org_ch(elm);
		// 文字表示 actualChSpeed = chSpeed 実際の文字表示スピード
		var acs = actualChSpeed;
		//updateBeforeCh 文字を描画する前にいったん画面描画に入るかどうかのカウント
		if(updateBeforeCh)
		{
			if(acs) { updateBeforeCh--; return -5; } else { updateBeforeCh--; }
		}
		//上の処理は良く分からないけれど、本来のchタグの先頭部分
		var len = currentMessage.length;
		//追加文字数がstoreCurrentMessages（ここでは20）以下
		//でかつf.noStoreCurrentMessageがfalseなら文字追加
		if((len < storeCurrentMessages) && (!f.noStoreCurrentMessage))
			//substring(<開始文字位置>,<文字数>)
			//例：var ss="abcdefghijkl".substring(3,3); ss には "def" が代入される
			currentMessage += elm.text.substring(0, storeCurrentMessages - len);
		//追加文字数がstoreCurrentMessagesの時
		//でかつf.noStoreCurrentMessageがfalseなら"……"追加
		if((len == storeCurrentMessages) && (!f.noStoreCurrentMessage))
			currentMessage += "……";
		return tagHandlers.org_ch(elm); //本来のchタグの処理に戻る
	} incontextof kag;

	.tagHandlers.org_cm = .tagHandlers.cm;
	.tagHandlers.cm = function( elm )
	{
		currentMessage = ""; // 見出しへの追加文字をリセット
		return tagHandlers.org_cm(elm); //本来のcmタグの処理に戻る
	} incontextof kag;

	.saveBookMarkToFile_org = .saveBookMarkToFile;
	.saveBookMarkToFile = function(fn, savehist = true)
	{
		//readOnlyMode 読み込み専用モードなら、リターン
		if(readOnlyMode) return false;
		//pcflags「保存可能なラベル」を通過した時点でのフラグ(コア)
		pcflags.currentMessage = currentMessage; // 見出しへの追加文字を栞に保存
		return saveBookMarkToFile_org(fn, savehist);
	} incontextof kag;

	.saveBookMarkWithAsk = function(num,add)
	{
		// 栞番号 num に栞を設定する
		// そのとき、設定するかどうかをたずねる
		if(readOnlyMode) return false;
		//bookMarkProtectedStates 栞が保護されているかの情報
		if(bookMarkProtectedStates[num]) return false;
		var prompt = "データをセーブしますか";
		//if(num < numBookMarks) prompt += (num + 1);
		if(bookMarkDates[num] != "") // bookMarkDates が空文字の場合は栞は存在しない
			prompt = "上書きセーブしますか？";
		if(add!="")
		 	prompt = add+"セーブしますか？";
		//セーブタイトルを（見出し＋メッセージレイヤの一番上に表示されている文字）にしたいなら
		//上のif(f.noStoreCurrentMessage)からコメントアウトして下のコメントアウトを外してください。
//		prompt += "に「"+ pcflags.currentPageName + " " + currentMessage + "」をはさみますか?";
		var result = askYesNo(prompt);
		//「はい」なら保存
		if(result) return saveBookMark(num); //本来の処理には戻らない
		//「いいえ」ならfalseを返す
		return false;
	} incontextof kag;

	.getBookMarkInfoFromData = function(dic, num)
	{
		// 辞書配列 dic から栞のページ名と日付を読み出し、
		// bookMarkDates[num] や bookMarkNames[num] に設定する
		// numBookMarks メニューに用意する栞のサブメニュー項目の数
		if(num < numBookMarks)
		{
			if(f.noStoreCurrentMessage)
				bookMarkNames[num] = dic.currentPageName;
			else
				bookMarkNames[num] = currentMessage;
			//セーブタイトルを（見出し＋メッセージレイヤの一番上に表示されている文字）にしたいなら
			//上のif(f.noStoreCurrentMessage)からコメントアウトして下のコメントアウトを外してください。
			bookMarkNames[num] = dic.currentPageName + "," + currentMessage;
			var date = new Date();
			date.setTime(dic.storeTime);
			date = "%04d/%02d/%02d %02d:%02d".sprintf(
			date.getYear(), date.getMonth() + 1, date.getDate(),
			date.getHours(), date.getMinutes() );
			bookMarkDates[num] = date;
			setBookMarkMenuCaptions();
			saveSystemVariables();
		}
	} incontextof kag;
}
// 最後に通過した[cm]タグから、kag.storeCurrentMessages文字分だけを見出しへの追加文字とする
// ただし、f.noStoreCurrentMessageが真の間に表示した分は除外
// （見出しにしたくない文字を表示するときは、上のフラグをONにする）

kag.getCurrentRead__org = kag.getCurrentRead;
kag.getCurrentRead = function()
{
// trueならすべてスキップ
if(sf.skip == true && kag.skipMode == 3) return true;
	return kag.getCurrentRead__org();
} incontextof kag;
sf.skipModePageWait=10;
kag.showLineBreak = function(elm)
{
	// 現在のメッセージレイヤにページ待ち記号を表示する
	stablePosibility = true;
	if(skipMode == 1 || skipMode == 2) cancelSkip();
	if(skipMode == 4 && !skipKeyPressing()) cancelSkip();
	if(skipMode){
		if(sf.skipModePageWait == 0)
		{
			 return -4; // いったんイベントを処理
		}
		else
		{
			return 10;
		}
	}


	if(autoMode)
	{
		// 自動読みすすみの場合
		return autoModePageWait;
	}

	current.showLineBreakGlyph(pageBreak);
	storeClickGlyphState("page");

	if(!current.nodeVisible)
	{
		dm("警告 : 非表示になっている" +
			(currentLine ? "裏" : "表") + "メッセージレイヤ" + currentNum +
			"でページクリック待ちになりました");
	}

	// conductor を 'click' まで待ち状態に
	conductor.wait(%[
		click : function
		{
			clickWaiting = false;
			fore.base.cursor = cursorDefault;
			notifyRun();
		} incontextof this
		]);
	clickWaiting = true;
	fore.base.cursor = cursorWaitingClick;
	notifyStable();
	return -2;
} incontextof kag;

kag.showaPageBreak = function(elm)
{
	// 現在のメッセージレイヤにページ待ち記号を表示する
	stablePosibility = true;
	if(skipMode == 1 || skipMode == 2) cancelSkip();
	if(skipMode == 4 && !skipKeyPressing()) cancelSkip();
	if(skipMode){
		if(sf.skipModePageWait == 0)
		{
			 return -4; // いったんイベントを処理
		}
		else
		{
			return 10;
		}
	}
	if(autoMode)
	{
		// 自動読みすすみの場合
		return autoModePageWait;
	}

	current.showLineBreakGlyph(pageBreak);
	storeClickGlyphState("page");

	if(!current.nodeVisible)
	{
		dm("警告 : 非表示になっている" +
			(currentLine ? "裏" : "表") + "メッセージレイヤ" + currentNum +
			"でページクリック待ちになりました");
	}

	// conductor を 'click' まで待ち状態に
	conductor.wait(%[
		click : function
		{
			clickWaiting = false;
			fore.base.cursor = cursorDefault;
			notifyRun();
		} incontextof this
		]);
	clickWaiting = true;
	fore.base.cursor = cursorWaitingClick;
	notifyStable();
	return -2;
} incontextof kag;


function mouseFocus(focus){
	var x;
	var y;

	var prx  = kag.scWidth/System.screenWidth;
	var dbx = (kag.scWidth-(446*prx))/2;

	var pry = kag.scHeight/System.screenHeight;
	var dby = (kag.scHeight-(156*pry))/2;

	if(sf.cursor||sf.confirm)
		return;

	if(focus=="no"){
		if(kag.fullScreen){
			x = dbx +280*prx;
			y = dby +90*pry;
		}
		else{
			x = ((kag.scWidth-446)/2)+280;
			y = ((kag.scHeight-156)/2)+90;
		}
		kag.fore.base.setCursorPos(x,y);
	}
	else if(focus=="yes"){
		if(kag.fullScreen){
			x = dbx +160*prx;
			y = dby +90*pry;
		}
		else{
			x = ((kag.scWidth-446)/2)+160;
			y = ((kag.scHeight-156)/2)+90;
		}
		kag.fore.base.setCursorPos(x,y);
	}
}

	if(sf.savedata_pos===void)
		sf.savedata_pos=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79];
	class DataDocButton extends ButtonLayer{
		var counter;
		var func;
		var label;
		var mode;

		function DataDocButton(window,parent,num,fname,ret,from){
			super.ButtonLayer(window, parent);
			focusable = false;
			visible = true;
			hitThreshold=255;
			counter=num;
			func=fname;
			label=ret;
			mode =from;

		}
		function onMouseUp(x,y,button,shift){
			if(enabled && button == mbLeft)
				onClickFunction(this);
			super.onMouseUp(...);
		}
		function onMouseUp(x,y,button,shift){
			if(enabled && button == mbLeft){
				if(func=='lock')
					lock();
				else if(func=='prev')
					prev();
				else if(func=='next')
					next();
			}
			super.onMouseUp(...);
		}
		function lock(){
			if(mode=='save'){
				tf.save_check_num=sf.savedata_pos[counter];
			}
			else if(mode=='load'){
				tf.load_check_num=sf.savedata_pos[counter];
			}
			kag.process('',label);
		};
		function prev(){
		if(counter==0)
				return;
			var tmp;
			tmp=sf.savedata_pos[counter];
			sf.savedata_pos[counter]=sf.savedata_pos[counter-1];
			sf.savedata_pos[counter-1]=tmp;
			kag.process('',label);
		};
		function next(){
			if(counter==79)
				return;
			var tmp;
			tmp=sf.savedata_pos[counter];
			sf.savedata_pos[counter]=sf.savedata_pos[counter+1];
			sf.savedata_pos[counter+1]=tmp;
			kag.process('',label);
		};
	};

	function deleteSaveFile(place)
	{
		mouseFocus('no');
		if(!askYesNo('データを削除しますか？'))
			return;
		Storages.deleteFile(kag.getBookMarkFileNameAtNum(place));
	};
	//セーブデータの詳細情報を書き込むクラス
	class dataCardLayer extends Layer
	{
		function dataCardLayer(window,parent,pos,page){
			super.Layer(...);

			//UI周りの設定
			font.height=10;
			font.face='ロダンntlg10';
			font.mapPrerenderedFont('font/ロダンntlg10.tft');
			if(pos<4){
				setPos(214 + 210*pos,192);
			}
			else{
				setPos(214 + 210*(pos-4),192+210);
			}

			var titlebg;
			this.titlebg = new TitleBGLayer(window,this,'image/saveload/data_title_default');
			this.titlebg.setSizeToImageSize();
			this.titlebg.setPos(22,134);
			this.titlebg.visible=true;


			hitThreshold=255;


			width=200;
			height=200;
			setSize(200,200);
			var pitch=0;
			//テキスト描画の設定
			var date= kag.getBookMarkDate(sf.savedata_pos[pos+page]);
			//var olsize  = 1+font.getTextWidth(date)/date.length;
			drawText(63,5,date,0xffffff);
			text.split(',',kag.getBookMarkPageName(sf.savedata_pos[pos+page]));
			var stringWidth = font.getTextWidth(text[0]);
			var marginL = (178-stringWidth)/2;

			font.mapPrerenderedFont('font/ロダンカトレア11b.tft');
			font.face='ロダンカトレア11b';
			this.titlebg.drawText(marginL,2,text[0],0xffffff);

			font.face='ロダンntlg11';
			font.mapPrerenderedFont('font/ロダンntlg11.tft');
			if(text[1].length>15){
				var tmptext = [];
				tmptext[0] = text[1].substr(0,15);
				tmptext[1] = text[1].substr(15);
				drawText(28,159,tmptext[0],0x7d7d7d);
				drawText(28,182,tmptext[1],0x7d7d7d);
			}
			else{
				drawText(28,159,text[1],0x7d7d7d);
			}
			visible=true;
			if(sf.new_save_data_pos==sf.savedata_pos[pos+page])
				addNew(window,this);
		}
		function addNew(window,parent){
			newtips = new newSaveLayer(window,parent);
		}
		function finalize(){
			super.finalize();
		}
	}
	class newSaveLayer extends Layer
	{
		function newSaveLayer(window,parent){
			super.Layer(...);
			loadImages('image/saveload/new');
			visible=true;
			setSizeToImageSize();
			setPos(200-width,90);
		}
	}
	class TitleBGLayer extends Layer
	{
		function TitleBGLayer(window,parent,bgtype){
			super.Layer(...);
			loadImages(bgtype);
			visible=true;
			setSizeToImageSize();
			setPos(10,10);
		}
	}

	//ぼかしのフェードイン
	class BlurAction extends Layer
	{
		var timer1;
		var timer2;
		var end;
		var tmr=0;
		var time;
		var blur;
		var brc=0;
		var brd;
		var dx;
		function BlurAction(window,parent,time=500,blur=20)
		{
			super.Layer(...);
			backlay();
			timer1 = new Timer(this,"blurIn");
			timer1.interval=1;
			timer2 = new Timer(this,"blurOut");
			timer2.interval=1;
			this.blur=blur;
			this.time=time;
			brd=blur;
			dx = this.blur/(60*(this.time/1000));
		}

		function backlay()
		{
			kag.back.base.assignImages(kag.fore.base);
			kag.back.layers[0].assignImages(kag.fore.layers[0]);
			kag.back.layers[1].assignImages(kag.fore.layers[1]);
			kag.back.layers[2].assignImages(kag.fore.layers[2]);
			kag.back.layers[3].assignImages(kag.fore.layers[3]);
			kag.back.layers[4].assignImages(kag.fore.layers[4]);
			kag.back.layers[5].assignImages(kag.fore.layers[5]);
		}
		function returnFore(){
			kag.fore.base.assignImages(kag.back.base);
			kag.fore.layers[0].assignImages(kag.back.layers[0]);
			kag.fore.layers[1].assignImages(kag.back.layers[1]);
			kag.fore.layers[2].assignImages(kag.back.layers[2]);
			kag.fore.layers[3].assignImages(kag.back.layers[3]);
			kag.fore.layers[4].assignImages(kag.back.layers[4]);
			kag.fore.layers[5].assignImages(kag.back.layers[5]);
		}
		function blurOut(){
			timer2.enabled=true;
			returnFore();
			if(brd<0){
				stop();
				finalize();
			}
			kag.fore.base.doBoxBlur(brd,brd);
			kag.fore.layers[0].doBoxBlur(brd,brd);
			kag.fore.layers[1].doBoxBlur(brd,brd);
			kag.fore.layers[2].doBoxBlur(brd,brd);
			kag.fore.layers[3].doBoxBlur(brd,brd);
			kag.fore.layers[4].doBoxBlur(brd,brd);
			kag.fore.layers[5].doBoxBlur(brd,brd);

			brd=brd-dx;
		}

		function blurIn()
		{
			timer1.enabled=true;
			if(blur<brc){
				stop();
			}
			returnFore();
			kag.fore.base.doBoxBlur(brc,brc);
			kag.fore.layers[0].doBoxBlur(brc,brc);
			kag.fore.layers[1].doBoxBlur(brc,brc);
			kag.fore.layers[2].doBoxBlur(brc,brc);
			kag.fore.layers[3].doBoxBlur(brc,brc);
			kag.fore.layers[4].doBoxBlur(brc,brc);
			kag.fore.layers[5].doBoxBlur(brc,brc);
			brc=brc+dx;
		}

		function finalize()
		{
			super.finalize();
			invalidate timer1;
			invalidate timer2;
		}
		function stop()
		{
			timer1.enabled=false;
			timer2.enabled=false;
		}
	}

	class DefaultFont
	{
		var userFace;
		var faceNum;
		var defaultChColor;
		var defaultShadow;
		var defaultLineSize;
		var defaultPitch;
		var defaultLineSpacing;
		var defaultEdgeColor;
		var defaultEdge;
		var fontSet = ['スーラ','筑紫a','ロダンntlg'];

		function DefaultFont(){
			(DefaultFont_config incontextof this)();
			faceNum = sf.font;

		}
	}


	function setFontStatus(elm)
	{
		kag.fore.messages[0].edgeExtent=2;
		kag.fore.messages[0].edgeEmphasis=2048;
		if(!sf.text_color){
			kag.fore.messages[0].edgeColor=0x777777;
			kag.fore.messages[0].color=0xffffff;
		}
		else{
			kag.fore.messages[0].color=0x777777;
			kag.fore.messages[0].edgeColor=0xffffff;
		}
	}

	function window_size_check(){
		if(sf.size==void || sf.size!=1){
			return;
		}else{
			kag.primaryLayer.width = 1280;
			kag.primaryLayer.height = 720;
			kag.setZoom(54,72);
			kag.innerWidth = 960;
			kag.innerHeight = 540;
		}
	}

	class ExtCharactorLayer extends Layer{
		function ExtCharactorLayer(window,parent,size){
			super.Layer(...);
			stretchCopy(0,0,width,height,parent,0,0,width*size,height*size,stCubic);
			visible=true;
		}
	}


	function stretch(layers_no,size,top=0,left=0)
	{
		var layer_dest = kag.fore.layers[layers_no];
		var dest_w = 1154*size;
		var dest_h = 1456*size;

		var tempLayer = new Layer(kag, layer_dest);
		tempLayer.assignImages(layer_dest);

		layer_dest.setImageSize(dest_w, dest_h);
		layer_dest.setSizeToImageSize();

		layer_dest.stretchCopy(0,0,dest_w,dest_h, tempLayer,0,0,tempLayer.imageWidth,tempLayer.imageHeight, stCubic);
		layer_dest.setPos(top,left);
		invalidate tempLayer;
	}
	
